version: '3.8'

services:
  # Main VulnScanner Application
  vulnscanner:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: vulnscanner:latest
    container_name: vulnscanner-prod
    restart: unless-stopped
    
    # Enhanced security configurations
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Needed for network scanning
    read_only: false
    user: "1000:1000"
    cap_drop:
      - ALL
    cap_add:
      - NET_RAW
      - NET_ADMIN
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '4.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    
    # Production environment variables
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
      - ENV=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - SCANNER_OUTPUT_DIR=/app/reports
      - SCANNER_LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30
      - AUDIT_LOG_ENABLED=true
    
    # Persistent volumes
    volumes:
      - scanner-reports:/app/reports:rw
      - scanner-logs:/app/logs:rw
      - scanner-config:/app/config:ro
      - /etc/localtime:/etc/localtime:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "/app/monitoring/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Network configuration
    networks:
      - scanner-network
      - monitoring-network
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=vulnscanner,environment=production"
    
    # DNS configuration
    dns:
      - 8.8.8.8
      - 1.1.1.1
    
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: vulnscanner-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    
    security_opt:
      - no-new-privileges:true
    read_only: true
    
    volumes:
      - redis-data:/data:rw
      - /tmp:/tmp:rw
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    networks:
      - scanner-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: vulnscanner-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=vulnscanner
      - POSTGRES_USER=vulnscanner
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    
    security_opt:
      - no-new-privileges:true
    
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vulnscanner -d vulnscanner"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    networks:
      - scanner-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: vulnscanner-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:rw
    
    networks:
      - monitoring-network
    
    depends_on:
      - vulnscanner

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vulnscanner-grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - monitoring-network
    
    depends_on:
      - prometheus

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: vulnscanner-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./reports:/usr/share/nginx/html/reports:ro
      - ./docker/index.html:/usr/share/nginx/html/index.html:ro
    
    networks:
      - scanner-network
      - monitoring-network
    
    depends_on:
      - vulnscanner
      - grafana

  # ELK Stack for centralized logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: vulnscanner-elasticsearch
    restart: unless-stopped
    
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data:rw
    
    networks:
      - monitoring-network
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: vulnscanner-logstash
    restart: unless-stopped
    
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - scanner-logs:/var/log/vulnscanner:ro
    
    networks:
      - monitoring-network
    
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: vulnscanner-kibana
    restart: unless-stopped
    
    ports:
      - "5601:5601"
    
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    
    networks:
      - monitoring-network
    
    depends_on:
      - elasticsearch

  # File beat for log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.5.0
    container_name: vulnscanner-filebeat
    restart: unless-stopped
    user: root
    
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - scanner-logs:/var/log/vulnscanner:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    networks:
      - monitoring-network
    
    depends_on:
      - elasticsearch

  # Backup service
  backup-service:
    image: alpine:latest
    container_name: vulnscanner-backup
    restart: "no"
    
    volumes:
      - scanner-reports:/backup/reports:ro
      - postgres-data:/backup/postgres:ro
      - ./scripts/backup.sh:/backup.sh:ro
    
    command: ["/bin/sh", "/backup.sh"]
    
    networks:
      - scanner-network

networks:
  scanner-network:
    driver: bridge
    name: vulnscanner-prod-net
  monitoring-network:
    driver: bridge
    name: vulnscanner-monitoring-net

# Named volumes for persistent data
volumes:
  scanner-reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/vulnscanner/reports
  scanner-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/vulnscanner/logs
  scanner-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/vulnscanner/config
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local 